%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%            Program to find fixed base response of shear type        %
%                               building                              %
%                                                                     %
%                                                                     %
%                                                                     %
% Note: Pleasre refer for variable definitions towards the end of     %
%       the code                                                      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
tic
clear all
clc

%% Checkboxes
G_f_k_adjust=1; %Change Line 26 accordingly (L_stiffness)
G_f_c_adjust=1; %Change Line 27, 28 accordingly (L_damping ratios and G_f_damping)

%% Initializations

fk= 1; %Common factor for L_stiffness
fm= 1; %Common factor for L_mass
fdr=0.02;
L_mass = fm*[1]; % Enter in unit kg
L_stiffness = fk*[1]; % Enter in unit N/m
L_damping_ratios = fdr*[1]; %Specify if classical caughey damping matrix is to be constructed
G_f_damping=[0]; %Specify explicity if required but ensure G_f_c_adjust=0
load 'N8.txt' %Ensure the data starts from "zero".
xg=N8./100; % '/100' used to converted cm/s2 to m/s2
dt_o=0.005; % Time step in seconds
% Input if G_f_k_adjust = 1
Ts=0.5;

%% Base Isolator
Tb = 3;
Mb = 1;
eb = 0.05;
w=2*pi/Tb;
Kb=(Mb+sum(L_mass))*(2*pi/Tb)^2;
Cb=2*eb*w*(Mb+sum(L_mass));
%% Temporary variables and initializations
N=length(L_mass);



%% Assembling global fixed-base mass matrix
for i = 1:N
    G_f_mass(i,i) = L_mass(i);
end

%% Assembling global fixed-base stiffness matrix
if (N==1)
    G_f_stiffness(1,1)=L_stiffness(1);
else
    
    for i = N:-1:1
        if i==1
            G_f_stiffness(i,1)=L_stiffness(i);
            G_f_stiffness(i,2)=(-1)*L_stiffness(i);
        end
        if (i>1 && i<N)
            for j=(i-1):(i+1)
                if j==(i-1)
                    G_f_stiffness(i,j)=(-1)*L_stiffness(j);
                end
                if j==i
                    G_f_stiffness(i,j)=L_stiffness(i-1)+L_stiffness(i);
                end
                if j==(i+1)
                    G_f_stiffness(i,j)=(-1)*L_stiffness(j);
                end
            end
        end
        
        if i==N
            G_f_stiffness(i,i-1)=(-1)*L_stiffness(i);
            G_f_stiffness(i,i)=L_stiffness(i-1)+L_stiffness(i);
        end
    end
end
[f_mode_shape, f_ang_freq_sq]=eig(G_f_stiffness,G_f_mass);

%% Adjusting stiffness matrix for fixed-base fundamental time period if
%  G_f_k_adjust =1

if (G_f_k_adjust == 1)
    Ws=2*pi/Ts;
    RT=Ws/(f_ang_freq_sq(1,1).^0.5);
    G_f_stiffness= G_f_stiffness*(RT^2);
end


%% Calculation of undamped mode shape matrix and natural time period
[f_mode_shape, f_ang_freq_sq]=eig(G_f_stiffness,G_f_mass);
f_timeperiod_superstructure=2*pi*diag(f_ang_freq_sq).^(-0.5)
f_ang_freq_superstructure=2*pi./f_timeperiod_superstructure

%% Calculation of fixed-base global damping matrix (Caughey damping matrix)
% It is a classical damping matrix
if (G_f_c_adjust == 1)
    for i=1:N
        for j=1:N
            c_w(i,j)=f_ang_freq_superstructure(i)^(2*(j-1)-1);
        end
        c_cr(i,1)=2*L_damping_ratios(i);
    end
    
    c_a=inv(c_w)*c_cr;
    G_f_damping=0;
    
    for i=1:N
        G_f_damping=G_f_damping+c_a(i)*G_f_mass*(inv(G_f_mass)*G_f_stiffness)^(i-1);
    end
end


Othomass=f_mode_shape'*G_f_mass*f_mode_shape
Othostiffness=f_mode_shape'*G_f_stiffness*f_mode_shape;
Othodamping=(f_mode_shape'*G_f_damping*f_mode_shape)

M = G_f_mass;
K = G_f_stiffness;
C = G_f_damping;
f_mode_shape
t1=f_ang_freq_sq.^0.5
((f_mode_shape'*G_f_damping*f_mode_shape)./(2*t1))./G_f_mass; % SOME PROBLEM HERE IN ORTHOGONALIZING THE MASS MATRIX

%% Newmark Beta Parameters

ndiv=1;

dt = dt_o/ndiv;
a0 = 6/dt^2; a1 = -6/dt; a2 = -3;
b0 = 3/dt; b1 = -3; b2 = -dt/2;

Ib = ones(N,1);
I = ones(N,1);
Ick = [zeros(N-1,1);1]
CN = I'*C*Ick;
KN = I'*K*Ick;

Kvv = a0*M+b0*C+K;
Kvvb = a0*M*Ib;
Kvbv = [zeros(1,N-1) -b0*CN-KN];
Kvbvb = a0*Mb + b0*Cb + Kb;

K_left = [Kvv Kvvb; Kvbv Kvbvb];

MM = [M diag(M);zeros(1,N) Mb];
CC = [C zeros(N,1); zeros(1,N-1) -CN Cb];
KK = [K zeros(N,1); zeros(1,N-1) -KN Kb];

acc(1:N,1:2)=0;
accb = 0;
vel(1:N,1:2)=0;
velb = 0;
dis(1:N,1:2)=0;
disb = 0;

Floor_acc(1:N,1)=0;
Base_accb(1,1) = 0;
Floor_vel(1:N,1)=0;
Base_velb(1,1) = 0;
Floor_dis(1:N,1)=0;
Base_disb(1,1) = 0;

t(1)=0;

for i = 1:length(xg)-1
    
    t(i+1)= t(i) + dt*ndiv;
    Dag = xg(i+1)-xg(i);
    DPINC = Dag/ndiv;
    DFb = 0;
    DFs = 0;
    P2 = xg(i);
    
    for j = 1:ndiv
        
        P2 = P2 + DPINC;
      
        DPv = -M*I*DPINC - (a1*M+b1*C)*vel(:,1) - (a2*M+b2*C)*acc(:,1) - (a1*M*Ib)*velb(:,1) - (a2*M*Ib)*accb(:,1);
        DPb = -Mb*DPINC - (a1*Mb+b1*Cb)*velb(1,1) - (a2*Mb+b2*Cb)*accb(1,1) + b1*CN*vel(N,1) + b2*CN*acc(N,1);
        
%         DFs = 0.05*sign(velb(1,1))*(sum(diag(M))+Mb);
        
        DF = [zeros(N,1);-DFs-DFb];
        
        DP = [DPv;DPb] + DF;
        DX = inv(K_left)*DP;
        
        Dx = DX(1:N,1);
        Dxb = DX(N+1,1);
        
%         Da = a0*Dx + a1*vel(:,1) + a2*acc(:,1);
%         Dab = a0*Dxb + a1*velb(1,1) + a2*accb(1,1);
        
        Dv = b0*Dx + b1*vel(:,1) + b2*acc(:,1)
        Dvb = b0*Dxb + b1*velb(1,1) + b2*accb(1,1);
        
        dis(:,2) = dis(:,1) + Dx;
        vel(:,2) = vel(:,1) + Dv;
        %         acc(:,2) = acc(:,1) + Da;
        
        disb(1,2) = disb(1,1) + Dxb;
        velb(1,2) = velb(1,1) + Dvb;
        %         accb(1,2) = accb(1,1) + Dab;
        
        temp = inv(MM)*(-[diag(M);Mb].*P2-CC*[vel(:,2);velb(1,2)]-KK*[dis(:,2);disb(1,2)]);
        acc(:,2) = temp(N,1);
        accb(1,2) = temp(N+1,1);
        
        dis(:,1) = dis(:,2);
        vel(:,1) = vel(:,2);
        acc(:,1) = acc(:,2);
        disb(1,1) = disb(1,2);
        velb(1,1) = velb(1,2);
        accb(1,1) = accb(1,2);
        end
        
    end
    
    Floor_acc(1:N,i+1)= acc(:,2)+I*accb(1,2)+I*xg(i+1);
    Base_accb(1,i+1) = accb(1,2)+xg(i+1);
    Floor_vel(1:N,i+1)= vel(:,2);
    Base_velb(1,i+1) = velb(:,2);
    Floor_dis(1:N,i+1)= dis(:,2);
    Base_disb(1,i+1) = disb(:,2);
    
    
end

figure(5)
subplot(3,1,1)
plot(t,Floor_acc(1,:))
title('Top floor absolute acceleration (m/s2)')
subplot(3,1,2)
plot(t,xg)
title('Ground acceleration (m/s2)')
subplot(3,1,3)
plot(t,Base_disb(1,:).*100)
title('Bearing displacement (cm)')
max(abs(Floor_acc(1,:)))
toc